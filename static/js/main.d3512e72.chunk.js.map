{"version":3,"sources":["store/modules/board/reducer.ts","store/modules/boards/reducer.ts","store/modules/user/reducer.ts","store/reducer.ts","store/store.ts","pages/Board/components/Card/Card.tsx","api/requests.ts","common/constants/api.ts","api/loader.ts","store/modules/board/actions.ts","api/validation.ts","pages/Board/components/List/List.tsx","pages/Board/components/NewListModal/NewListModal.tsx","pages/Board/Board.tsx","store/modules/boards/actions.ts","pages/Home/components/Board/Board.tsx","pages/Home/components/NewBoardModal/NewBoardModal.tsx","pages/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","title","users","lists","boards","id","username","combineReducers","board","state","action","type","payload","user","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","Card","props","className","instance","axios","create","baseURL","process","headers","Authorization","interceptors","request","use","config","progressBar","document","querySelector","firstElementChild","setTimeout","classList","add","startLoader","error","Swal","fire","icon","text","Promise","reject","response","res","remove","finishLoader","data","createNewList","board_id","listTitle","listPosition","dispatch","a","list","position","api","post","get","editListTitle","listId","requestBody","put","createNewCard","cardTitle","list_id","card","isValidData","str","pattern","RegExp","newStr","match","List","cards","boardId","useDispatch","onKeyDown","e","key","preventDefault","getElementById","textContent","blur","onBlur","contentEditable","suppressContentEditableWarning","Object","values","map","onClick","cardCreator","name","value","tip","hideModal","modal","hideTip","NewListModal","numberOfLists","htmlFor","required","Board","this","getBoard","params","edit","editBoardTitle","to","boardTitle","length","React","Component","withRouter","connect","valueOf","createBoard","result","setRandomBackgroundColor","color","i","Math","floor","random","style","background","toggleModal","toggle","toggleTip","NewBoardModal","titleText","showModal","Home","getBoards","App","useState","progress","setProgress","basename","onLoaderFinished","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d3512e72.chunk.js","sourcesContent":["import { IList } from '../../../common/interfaces/IList';\r\nimport { IUser } from '../../../common/interfaces/IUser';\r\n\r\nconst initialState = {\r\n  title: '',\r\n  users: [] as IUser[],\r\n  lists: [] as IList[],\r\n} as BoardType;\r\n\r\ntype BoardType = {\r\n  title: string;\r\n  users: [{ id: number; username: string }];\r\n  lists: [{ id: number; title: string; cards: [{ id: number; title: string; description: string; users: number[] }] }];\r\n};\r\n\r\nexport default function reducer(state = initialState, action: { type: string; payload: BoardType }): BoardType {\r\n  switch (action.type) {\r\n    case 'GET_BOARD_BY_ID': {\r\n      return { ...state, title: action.payload.title, users: action.payload.users, lists: action.payload.lists };\r\n    }\r\n\r\n    case 'EDIT_BOARD_TITLE': {\r\n      return { ...state, title: action.payload.title };\r\n    }\r\n\r\n    case 'CREATE_NEW_LIST': {\r\n      return { ...state, lists: action.payload.lists };\r\n    }\r\n\r\n    case 'EDIT_LIST_TITLE': {\r\n      return { ...state, lists: action.payload.lists };\r\n    }\r\n\r\n    case 'CREATE_NEW_CARD': {\r\n      return { ...state, lists: action.payload.lists };\r\n    }\r\n\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n}\r\n","/* eslint-disable no-console */\r\nimport { IBoard } from '../../../common/interfaces/IBoard';\r\n\r\nconst initialState = {\r\n  boards: [] as IBoard[],\r\n};\r\n\r\ntype BoardsType = {\r\n  boards: IBoard[];\r\n};\r\n\r\nexport default function reducer(state = initialState, action: { type: string; payload: IBoard[] }): BoardsType {\r\n  switch (action.type) {\r\n    case 'UPDATE_BOARDS':\r\n      return {\r\n        ...state,\r\n        boards: action.payload,\r\n      };\r\n\r\n    case 'CREATE_NEW_BOARD':\r\n      return {\r\n        ...state,\r\n        boards: action.payload,\r\n      };\r\n\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n}\r\n","const initialState = [{ id: 1, username: 'string' }] as UserType;\r\n\r\ntype UserType = [{ id?: number; username?: string }];\r\n\r\n/**\r\n * Stub reducer for users array.\r\n * @param state\r\n * @param action\r\n * @returns\r\n */\r\nexport default function reducer(state = initialState, action: { type: string; payload?: UserType }): UserType {\r\n  switch (action.type) {\r\n    case 'GET_USER': {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport boardReducer from './modules/board/reducer';\r\nimport boardsReducer from './modules/boards/reducer';\r\nimport userReducer from './modules/user/reducer';\r\n\r\n/**\r\n * This code combines all app reducers.\r\n */\r\nexport default combineReducers({\r\n  board: boardReducer,\r\n  boards: boardsReducer,\r\n  user: userReducer,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { ICard } from '../../../../common/interfaces/ICard';\r\nimport './card.scss';\r\n\r\n/**\r\n * This component renders card.\r\n * @param props with card data\r\n * @returns jsx element\r\n */\r\nexport default function Card(props: ICard): JSX.Element {\r\n  const { title } = props;\r\n  return <li className=\"card\">{title}</li>;\r\n}\r\n","import axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport { api } from '../common/constants';\r\nimport { finishLoader, startLoader } from './loader';\r\n\r\n/**\r\n * Here i create axios instance to work with requests.\r\n */\r\nconst instance = axios.create({\r\n  baseURL: api.baseURL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Authorization: 'Bearer 123',\r\n  },\r\n});\r\n\r\n/**\r\n * Here i start loader so it starts right before request is sent.\r\n */\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    startLoader();\r\n    return config;\r\n  },\r\n  (error) => {\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: error,\r\n    });\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Here i finish loader. So it finishes right after response recieve.\r\n */\r\ninstance.interceptors.response.use((res) => {\r\n  finishLoader();\r\n  return res.data;\r\n});\r\n\r\nexport default instance;\r\n","/**\r\n * This file holds url for axios requests.\r\n */\r\nexport default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n};\r\n","/**\r\n * This function starts progress bar located at the top of the page.\r\n */\r\nexport function startLoader(): void {\r\n  const progressBar = document.querySelector('.loading__bar')?.firstElementChild;\r\n  setTimeout(() => {\r\n    progressBar?.classList.add('bar__20');\r\n  }, 100);\r\n}\r\n\r\n/**\r\n * This function finishes progress bar and restarts its position.\r\n */\r\nexport function finishLoader(): void {\r\n  const progressBar = document.querySelector('.loading__bar')?.firstElementChild;\r\n  setTimeout(() => {\r\n    progressBar?.classList.add('bar__100');\r\n  }, 100);\r\n\r\n  setTimeout(() => {\r\n    progressBar?.classList.add('bar__complete');\r\n  }, 300);\r\n\r\n  setTimeout(() => {\r\n    progressBar?.classList.remove('bar__100');\r\n    progressBar?.classList.remove('bar__20');\r\n  }, 500);\r\n\r\n  setTimeout(() => {\r\n    progressBar?.classList.remove('bar__complete');\r\n  }, 1000);\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport Swal from 'sweetalert2';\r\nimport api from '../../../api/requests';\r\n\r\n/**\r\n * This function dispatches an action that gets detailed info of the board.\r\n * @param board_id string id of the board\r\n * @returns promise\r\n */\r\nexport const getBoard =\r\n  (board_id: string) =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const data = await api.get(`/board/${board_id}`);\r\n      await dispatch({ type: 'GET_BOARD_BY_ID', payload: data });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: `Cant get board with id:${board_id}`,\r\n      });\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n\r\n/**\r\n * This function helps to change title of the board.\r\n * @param board_id string id of the board\r\n * @param boardTitle new title of the board\r\n * @returns promise\r\n */\r\nexport const editBoardTitle =\r\n  (board_id: string, boardTitle: string) =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const title = { title: boardTitle };\r\n      await api.put(`/board/${board_id}`, title);\r\n      const data = await api.get(`/board/${board_id}`);\r\n      await dispatch({ type: 'EDIT_BOARD_TITLE', payload: data });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: `Cant change board title in board with id:${board_id}`,\r\n      });\r\n\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n\r\n/**\r\n * This function helps with creating new list.\r\n * @param board_id string id of the board\r\n * @param listTitle title of the new list\r\n * @param listPosition number with position of the new list\r\n * @returns promise\r\n */\r\nexport const createNewList =\r\n  (board_id: string, listTitle: string, listPosition: number) =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const list = { title: listTitle, position: listPosition };\r\n      await api.post(`/board/${board_id}/list`, list);\r\n      const data = await api.get(`/board/${board_id}`);\r\n      await dispatch({ type: 'CREATE_NEW_LIST', payload: data });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: `Cant create new list in board with id:${board_id}`,\r\n      });\r\n\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n\r\n/**\r\n * This function helps with changing list title.\r\n * @param board_id string id of the board\r\n * @param listId number id of the list\r\n * @param listTitle string changed title\r\n * @param listPosition number position of the list\r\n * @returns promise\r\n */\r\nexport const editListTitle =\r\n  (board_id: string, listId: number, listTitle: string, listPosition: number) =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const requestBody = { title: listTitle, position: listPosition };\r\n      await api.put(`/board/${board_id}/list/${listId}`, requestBody);\r\n      const data = await api.get(`/board/${board_id}`);\r\n      await dispatch({ type: 'EDIT_LIST_TITLE', payload: data });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: `Cant edit title on list with id:${listId} located in board with id:${board_id}`,\r\n      });\r\n\r\n      dispatch({ type: `ERROR in putting new board title for board with id:${board_id}` });\r\n    }\r\n  };\r\n\r\n/**\r\n * This function helps with creating new card on the list.\r\n * @param board_id string id of the board\r\n * @param cardTitle string title of the new card\r\n * @param list_id number id of the new card\r\n * @param listPosition number position of the list\r\n * @returns promise\r\n */\r\nexport const createNewCard =\r\n  (board_id: string, cardTitle: string, list_id: number, listPosition: number) =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const card = { title: cardTitle, list_id, position: listPosition + 1 };\r\n      await api.post(`/board/${board_id}/card`, card);\r\n      const data = await api.get(`/board/${board_id}`);\r\n      await dispatch({ type: 'CREATE_NEW_CARD', payload: data });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: `Cant create new card on list with id:${list_id} located in board with id:${board_id}`,\r\n      });\r\n\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n","/**\r\n * This function helps me to validate inputs.\r\n * @param str - string to validate\r\n * @returns - boolean true if string is matches pattern, false if not\r\n */\r\nexport default function isValidData(str: string): boolean {\r\n  if (str === null) {\r\n    return false;\r\n  }\r\n  const pattern = new RegExp('[а-яА-Яa-zA-Z0-9. *_-]+');\r\n  const newStr = str.match(pattern);\r\n  if (newStr === null) {\r\n    return false;\r\n  }\r\n  return str === newStr[0];\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { IListProps } from '../../../../common/interfaces/IListProps';\r\nimport './list.scss';\r\nimport Card from '../Card/Card';\r\nimport { editListTitle, createNewCard } from '../../../../store/modules/board/actions';\r\nimport isValidData from '../../../../api/validation';\r\n\r\n/**\r\n * This component renders list.\r\n * @param props with list data\r\n * @returns jsx element\r\n */\r\nexport default function List(props: IListProps): JSX.Element {\r\n  const { title } = props;\r\n  const { cards } = props;\r\n  const { id } = props;\r\n  const { board_id: boardId } = props;\r\n  const { position } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <li className=\"list__item\">\r\n      <h3\r\n        id={`${id}`}\r\n        onKeyDown={async (e): Promise<void> => {\r\n          if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            const listId = `${id}`;\r\n            const listTitle = document.getElementById(listId) as HTMLHeadingElement;\r\n            if (listTitle?.textContent && isValidData(listTitle?.textContent)) {\r\n              listTitle?.blur();\r\n            }\r\n          }\r\n        }}\r\n        onBlur={async (): Promise<void> => {\r\n          const listId = `${id}`;\r\n          const listTitle = document.getElementById(listId) as HTMLHeadingElement;\r\n          if (listTitle?.textContent && isValidData(listTitle?.textContent)) {\r\n            await dispatch(editListTitle(boardId, id, listTitle.textContent, position));\r\n          }\r\n        }}\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        className=\"list__title\"\r\n      >\r\n        {title}\r\n      </h3>\r\n      <ul className=\"list__main\">\r\n        {Object.values(cards).map((card) => (\r\n          <Card key={card.id} title={card.title} />\r\n        ))}\r\n        <li>\r\n          <button\r\n            onClick={(): void => {\r\n              const cardCreator = document.querySelector(`#cc-${id}`);\r\n              cardCreator?.classList.remove('cc-hidden');\r\n            }}\r\n            className=\"list__btn\"\r\n          >\r\n            Добавить новую карточку\r\n          </button>\r\n          <div id={`cc-${id}`} className=\"list__card-creator card-creator cc-hidden\">\r\n            <textarea className=\"card-creator__textArea\" name=\"title\" id={`title-${id}`} />\r\n            <div className=\"card-creator__btns\">\r\n              <button\r\n                onClick={async (): Promise<void> => {\r\n                  const cardCreator = document.querySelector(`#cc-${id}`);\r\n                  const cardTitle = document.querySelector(`#title-${id}`) as HTMLInputElement;\r\n                  if (isValidData(cardTitle.value)) {\r\n                    await dispatch(createNewCard(boardId, cardTitle.value, id, position));\r\n                    cardTitle.value = '';\r\n                    const tip = document.querySelector('#cc-tip');\r\n                    tip?.classList.add('cc-hidden');\r\n                    cardCreator?.classList.add('cc-hidden');\r\n                  } else {\r\n                    const tip = document.querySelector('#cc-tip');\r\n                    tip?.classList.remove('cc-hidden');\r\n                  }\r\n                }}\r\n                className=\"list__btn card-creator__done\"\r\n              >\r\n                Готово\r\n              </button>\r\n              <button\r\n                onClick={(): void => {\r\n                  const cardCreator = document.querySelector(`#cc-${id}`);\r\n                  cardCreator?.classList.add('cc-hidden');\r\n                  const cardTitle = document.querySelector(`#title-${id}`) as HTMLInputElement;\r\n                  cardTitle.value = '';\r\n                  const tip = document.querySelector('#cc-tip');\r\n                  tip?.classList.add('cc-hidden');\r\n                }}\r\n                className=\"list__btn card-creator__cancel\"\r\n              >\r\n                Отмена\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div id=\"cc-tip\" className=\"cc__tip cc-hidden\">\r\n            Название карточки не должно быть пустым. <br /> В названии карточки можно использовать:\r\n            <ul>\r\n              <li>цифры</li>\r\n              <li>буквы(а, А)</li>\r\n              <li>пробелы</li>\r\n              <li>тире</li>\r\n              <li>точки</li>\r\n              <li>нижние подчеркивания</li>\r\n            </ul>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport isValidData from '../../../../api/validation';\r\nimport { createNewList } from '../../../../store/modules/board/actions';\r\nimport './NewListModal.scss';\r\n\r\ntype ListProps = { numberOfLists: number; boardId: string };\r\n\r\n/**\r\n * This function helps to hide modal.\r\n */\r\nfunction hideModal(): void {\r\n  const modal = document.querySelector('.modal');\r\n  modal?.classList.add('hide');\r\n}\r\n\r\n/**\r\n * This function helps to hide tip about new list title.\r\n */\r\nfunction hideTip(): void {\r\n  const tip = document.querySelector('#tip');\r\n  tip?.classList.add('hidden');\r\n}\r\n\r\n/**\r\n * This component renders modal that helps with creating new list on the board.\r\n * @param props for creating new list\r\n * @returns jsx element\r\n */\r\nexport default function NewListModal(props: ListProps): JSX.Element {\r\n  const { numberOfLists } = props;\r\n  const { boardId } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"modal list hide\">\r\n      <form className=\"modal__form form\">\r\n        <label className=\"form__label\" htmlFor=\"title\">\r\n          Название списка:\r\n        </label>\r\n        <input id=\"title\" required className=\"form__input\" type=\"text\" />\r\n        <div className=\"form__buttons\">\r\n          <button\r\n            onClick={async (e): Promise<void> => {\r\n              e.preventDefault();\r\n              const listTitle = document.querySelector('#title') as HTMLInputElement;\r\n              if (isValidData(listTitle.value)) {\r\n                await dispatch(createNewList(boardId, listTitle.value, numberOfLists));\r\n                hideTip();\r\n                listTitle.value = '';\r\n                hideModal();\r\n              } else {\r\n                const tip = document.querySelector('#tip');\r\n                tip?.classList.remove('hidden');\r\n              }\r\n            }}\r\n            className=\"form__btn home__btn confirm\"\r\n            type=\"button\"\r\n          >\r\n            Подтвердить\r\n          </button>\r\n          <button\r\n            onClick={(e): void => {\r\n              e.preventDefault();\r\n              hideModal();\r\n              hideTip();\r\n              const listTitle = document.querySelector('#title') as HTMLInputElement;\r\n              listTitle.value = '';\r\n            }}\r\n            className=\"form__btn home__btn cancel\"\r\n          >\r\n            Отмена\r\n          </button>\r\n        </div>\r\n        <div id=\"tip\" className=\"form__tip hidden\">\r\n          Имя доски не должно быть пустым. <br /> В названии доски можно использовать:\r\n          <ul>\r\n            <li>цифры</li>\r\n            <li>буквы(а, А)</li>\r\n            <li>пробелы</li>\r\n            <li>тире</li>\r\n            <li>точки</li>\r\n            <li>нижние подчеркивания</li>\r\n          </ul>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport List from './components/List/List';\nimport './board.scss';\nimport { getBoard, editBoardTitle } from '../../store/modules/board/actions';\nimport isValidData from '../../api/validation';\nimport NewListModal from './components/NewListModal/NewListModal';\nimport { IGlobalState } from '../../common/interfaces/IGlobalState';\nimport { IBoardState } from '../../common/interfaces/IBoardState';\n\ntype TParams = { board_id: string };\n\ntype BoardTypeMethods = {\n  getBoard: (board_id: string) => Promise<void>;\n  editBoardTitle: (board_id: string, boardTitle: string) => Promise<void>;\n};\n\ntype BoardType = IBoardState & BoardTypeMethods;\n\ntype PropsType = RouteComponentProps<TParams> & BoardType;\n\n/**\n * This class renders detailed Board page.\n */\nclass Board extends React.Component<PropsType, IBoardState> {\n  async componentDidMount(): Promise<void> {\n    const { match } = this.props;\n    const { getBoard: get } = this.props;\n    await get(match.params.board_id);\n  }\n\n  render(): JSX.Element {\n    const { match } = this.props;\n    const { lists } = this.props;\n    const { title } = this.props;\n    const { editBoardTitle: edit } = this.props;\n\n    return (\n      <div className=\"board__wrapper\">\n        <div className=\"board__header\">\n          <Link to=\"/\" className=\"home-btn board__btn\">\n            Домой\n          </Link>\n          <h1\n            onKeyDown={async (e): Promise<void> => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                const boardTitle = document.querySelector('h1');\n                if (boardTitle?.textContent && isValidData(boardTitle?.textContent)) {\n                  boardTitle?.blur();\n                }\n              }\n            }}\n            onBlur={async (): Promise<void> => {\n              const boardTitle = document.querySelector('h1');\n              if (boardTitle?.textContent && isValidData(boardTitle?.textContent)) {\n                await edit(match.params.board_id, boardTitle?.textContent);\n              }\n            }}\n            className=\"board__title\"\n            contentEditable\n            suppressContentEditableWarning\n          >\n            {title}\n          </h1>\n          <h3 className=\"board__id\">{match.params.board_id}</h3>\n        </div>\n        <div className=\"board__content\">\n          <ul className=\"board__lists\">\n            {lists.map((list) => (\n              <List\n                key={list.id}\n                position={list.position}\n                board_id={match.params.board_id}\n                id={list.id}\n                title={list.title}\n                cards={list.cards}\n              />\n            ))}\n            <button\n              onClick={(): void => {\n                const modal = document.querySelector('.modal');\n                modal?.classList.remove('hide');\n              }}\n              className=\"board__btn\"\n            >\n              Добавить новый список\n            </button>\n          </ul>\n          <div className=\"modal__container\">\n            <NewListModal boardId={match.params.board_id} numberOfLists={lists.length} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: IGlobalState): IBoardState {\n  const { board } = state;\n  const { lists } = board;\n  const { users } = board;\n  const { title } = board;\n\n  return { title: title.valueOf(), lists: Object.values(lists), users: [...users] };\n}\n\nexport default withRouter(connect(mapStateToProps, { getBoard, editBoardTitle })(Board));\n","import { Dispatch } from 'redux';\r\nimport Swal from 'sweetalert2';\r\nimport api from '../../../api/requests';\r\nimport { IBoard } from '../../../common/interfaces/IBoard';\r\n\r\ntype BoardsList = {\r\n  boards: IBoard[];\r\n};\r\n\r\ntype CreateResponse = {\r\n  result: string;\r\n  id: number;\r\n};\r\n\r\n/**\r\n * This function helps with getting boards array from the backend.\r\n * @returns promise\r\n */\r\nexport const getBoards =\r\n  () =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const data: BoardsList = await api.get('/board');\r\n      await dispatch({ type: 'UPDATE_BOARDS', payload: data.boards });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'Cant get boards list from server. Try to reload page.',\r\n      });\r\n\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n\r\n/**\r\n * This function helps with creating new board on the homepage. New board will be empty.\r\n * @param boardTitle string title of the new board\r\n * @returns promise\r\n */\r\nexport const createBoard =\r\n  (boardTitle?: string) =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const title = { title: boardTitle };\r\n      const response: CreateResponse = await api.post('/board', title);\r\n      if (response.result === 'Created') {\r\n        const data: BoardsList = await api.get('/board');\r\n        await dispatch({ type: 'CREATE_NEW_BOARD', payload: data.boards });\r\n      }\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'Cant create new board. Try to reload page and try again.',\r\n      });\r\n\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IHomeBoardProps } from '../../../../common/interfaces/IHomeBoardProps';\r\nimport './board.scss';\r\n\r\n/**\r\n * I found this function here: https://stackoverflow.com/questions/1484506/random-color-generator\r\n * It generates random hex color value.\r\n * @returns string with color\r\n */\r\nfunction setRandomBackgroundColor(): string {\r\n  const letters = '0123456789ABCDEF';\r\n  let color = '#';\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\n/**\r\n * This component renders board. Used on home page.\r\n * @param props that holds title of the board and id\r\n * @returns jsx element with link to exact board\r\n */\r\nexport default function Board(props: IHomeBoardProps): JSX.Element {\r\n  const { title } = props;\r\n  const { id } = props;\r\n  return (\r\n    <Link to={`/board/${id}`} style={{ background: setRandomBackgroundColor() }} className=\"home__board-column\">\r\n      <div>{title}</div>\r\n    </Link>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport './NewBoardModal.scss';\r\nimport { createBoard } from '../../../../store/modules/boards/actions';\r\nimport isValidData from '../../../../api/validation';\r\n\r\n/**\r\n * This function helps to show or hide modal window with form that creates new board.\r\n */\r\nfunction toggleModal(): void {\r\n  const modal = document.querySelector('.modal');\r\n  modal?.classList.toggle('hide');\r\n}\r\n\r\n/**\r\n * This function helps with showing and hiding tip about title of the new board.\r\n * @param remove boolean true if element need to be removed, false if need to be showed\r\n */\r\nfunction toggleTip(remove: boolean): void {\r\n  const tip = document.querySelector('.form__tip');\r\n  if (remove) {\r\n    tip?.classList.remove('hidden');\r\n  } else {\r\n    tip?.classList.add('hidden');\r\n  }\r\n}\r\n\r\n/**\r\n * This component helps with creating new board. It validates text before sending it to backend.\r\n * @returns jsx element with form for creating new board\r\n */\r\nexport default function NewBoardModal(): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"modal hide\">\r\n      <form className=\"modal__form form\">\r\n        <label className=\"form__label\" htmlFor=\"title\">\r\n          Название доски:\r\n        </label>\r\n        <input id=\"title\" required className=\"form__input\" type=\"text\" />\r\n        <div className=\"form__buttons\">\r\n          <button\r\n            onClick={async (): Promise<void> => {\r\n              const titleText = document.querySelector('.form__input') as HTMLInputElement;\r\n              if (isValidData(titleText.value)) {\r\n                await dispatch(createBoard(titleText.value));\r\n                toggleModal();\r\n                toggleTip(false);\r\n                titleText.value = '';\r\n              } else {\r\n                toggleTip(true);\r\n              }\r\n            }}\r\n            className=\"form__btn home__btn confirm\"\r\n            type=\"button\"\r\n          >\r\n            Подтвердить\r\n          </button>\r\n          <button\r\n            onClick={(e): void => {\r\n              e.preventDefault();\r\n              toggleModal();\r\n              toggleTip(false);\r\n              const titleText = document.querySelector('.form__input') as HTMLInputElement;\r\n              titleText.value = '';\r\n            }}\r\n            className=\"form__btn home__btn cancel\"\r\n          >\r\n            Отмена\r\n          </button>\r\n        </div>\r\n        <div id=\"tip\" className=\"form__tip hidden\">\r\n          Имя доски не должно быть пустым. <br /> В названии доски можно использовать:\r\n          <ul>\r\n            <li>цифры</li>\r\n            <li>буквы(а, А)</li>\r\n            <li>пробелы</li>\r\n            <li>тире</li>\r\n            <li>точки</li>\r\n            <li>нижние подчеркивания</li>\r\n          </ul>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './home.scss';\r\nimport { getBoards } from '../../store/modules/boards/actions';\r\nimport Board from './components/Board/Board';\r\nimport { IBoard } from '../../common/interfaces/IBoard';\r\nimport NewBoardModal from './components/NewBoardModal/NewBoardModal';\r\nimport { IGlobalState } from '../../common/interfaces/IGlobalState';\r\nimport { IHomeBoardProps } from '../../common/interfaces/IHomeBoardProps';\r\n\r\ntype PropsType = {\r\n  boards: [];\r\n  getBoards: () => Promise<void>;\r\n};\r\n\r\n/**\r\n * This function helps with showing modal that creates helps to create new board.\r\n */\r\nfunction showModal(): void {\r\n  const modal = document.querySelector('.modal');\r\n  modal?.classList.toggle('hide');\r\n}\r\n\r\n/**\r\n * This class renders home page. Page contains list of boards.\r\n */\r\nclass Home extends React.Component<PropsType, IGlobalState> {\r\n  async componentDidMount(): Promise<void> {\r\n    const { getBoards: get } = this.props;\r\n    await get();\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const { boards } = this.props;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"home__title\">Мои доски</h1>\r\n        <div className=\"home__boards-row\">\r\n          {boards.map((board: IBoard) => (\r\n            <Board key={board.id} id={board.id} title={board.title} />\r\n          ))}\r\n          <div className=\"home__board-column last-column\">\r\n            <button onClick={showModal} className=\"home__btn\">\r\n              Создать доску\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <NewBoardModal />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IGlobalState): IHomeBoardProps[] => ({\r\n  ...state.boards,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getBoards })(Home);\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport LoadingBar from 'react-top-loading-bar';\nimport Board from './pages/Board/Board';\nimport Home from './pages/Home/Home';\n\n/**\n * This is main component of the application.\n * @returns jsx element\n */\nfunction App(): JSX.Element {\n  const [progress, setProgress] = useState(0);\n  return (\n    <Router basename=\"https://zlyuka14.github.io/trello_clone/\">\n      <div>\n        <LoadingBar\n          className=\"loading__bar\"\n          color=\"blue\"\n          progress={progress}\n          onLoaderFinished={(): void => setProgress(0)}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/board/:board_id\" component={Board} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}